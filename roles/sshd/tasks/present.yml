# vim: set ft=yaml ts=2 expandtab:

# This file is part of ansible-collection-openssh
# Copyright (c) 2021 Markus Falb <markus.falb@mafalb.at>
#
# ansible-collection-openssh is free software: you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# ansible-collection-openssh is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ansible-collection-openssh.
# If not, see <https://www.gnu.org/licenses/>.

---

- name: debug sshd.cfg
  debug: var=sshd.cfg
  tags:
  - never
  - debug

- name: assert that Match is a list to avoid nasty jinja2 error
  assert:
    that: sshd_config.Match|type_debug == 'list'
    fail_msg: sshd_config.Match must be a list
  when: sshd_config.Match is defined

- name: sshd is present
  package:
    name: "{{ sshd_extra_packages|default([]) + sshd_packages }}"
    state: present

- name: sshd is configured
  block:

  - name: directory for global authorized_keys is present
    file:
      path: /etc/ssh/authorized_keys
      state: directory
      mode: 00755

  - name: sshd_config.d is present
    file:
      path: "{{ sshd_config_d }}"
      state: directory
      mode: 00750
    notify: reload sshd
    when: sshd_config_has_global_include

  # RedHat only:
  #
  # if the keys does not exist yet
  # the validation of sshd_config in the next task would fail
  # so generate the keys manually
  #
  - name: hostkeys are generated
    service:
      name: "{{ sshd_keygen_service }}"
      state: started
    when: ansible_os_family == 'RedHat'

  # similar situation on Debian
  # validation fails with
  #
  # Missing privilege separation directory: /run/sshd
  #
  - name: privilege separation directory
    file:
      path: /run/sshd
      state: directory
      mode: '755'
      force: false
    when: sshd_missing_runtime_dir is defined
    register: _runtime_dir

  - name: sshd main config is present
    template:
      src: "{{ sshd_config_template }}"
      dest: /etc/ssh/sshd_config
      validate: "{{ sshd_validate }}"
      mode: '644'
      backup: true
    notify: reload sshd

- name: sshd is started
  service:
    name: "{{ sshd_service }}"
    state: started
    enabled: true
  register: _sshd_was_just_started

...
